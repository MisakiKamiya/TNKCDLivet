<Window x:Class="TNKCDLivet.Views.WorkRelation"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:TNKCDLivet.Views"
        xmlns:vm="clr-namespace:TNKCDLivet.ViewModels"
        Title="WorkRelation" Height="720" Width="740">

    <Window.Background>
        <ImageBrush ImageSource = "../img/emoi_haikei.jpg" Stretch="UniformToFill"/>
    </Window.Background>
   
    <Window.DataContext>
        <vm:WorkRelationViewModel/>
    </Window.DataContext>

    <i:Interaction.Triggers>

        <l:InteractionMessageTrigger MessageKey="ShowSubmitCommand" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>
        <l:InteractionMessageTrigger MessageKey="WorkDeleteCommand" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>
        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction/>
        </l:InteractionMessageTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <Grid>
        <Canvas>
            <TextBlock Height="600" Width="450" Canvas.Left="140" Canvas.Top="30" Background="Violet" />
            <TextBlock Text="業務関連度" FontSize="30" Canvas.Left="180" Canvas.Top="69" />

            <!-- 部署・課の選択と削除ボタン -->


            <ComboBox  ItemsSource="{Binding Work}" DisplayMemberPath="WorkRelation" 
                       FontSize="30"  Width="300" Canvas.Left="180" Canvas.Top="186" SelectedIndex='0' RenderTransformOrigin="0.361,2.909" SelectedValue="{Binding Id}" />

            <Button Content="削除" FontSize="30" Height="46" Canvas.Left="480" Canvas.Top="186" Command="{Binding WorkDelCommand}"/>

            <!-- 変更ボタン -->
            <TextBox FontSize="30" Width="300" Canvas.Left="180" Canvas.Top="363"/>
            <Button Content="変更" FontSize="30" Height="42" Canvas.Left="480" Canvas.Top="363"/>

            <!-- 新規作成 -->
            <TextBox FontSize="30" Width="300" Canvas.Left="180" Canvas.Top="470" Text="{Binding CWork.WorkRelation}"/>
            <Button Content="作成" FontSize="30" Height="42" Canvas.Left="480" Canvas.Top="470" Command="{Binding SubmitCommand}"/>

            <!-- 戻るボタン -->
            <Button Content="戻る" FontSize="20" Height="40" Width="50" Canvas.Right="20" Canvas.Top="619" RenderTransformOrigin="0.62,3" Canvas.Left="657"
                    Command="{Binding CloseCommand}"/>
        </Canvas>
    </Grid>

</Window>

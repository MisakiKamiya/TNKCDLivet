<Window x:Class="TNKCDLivet.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:TNKCDLivet.Views"
        xmlns:vm="clr-namespace:TNKCDLivet.ViewModels"
        Title="掲示板" Height="720" Width="740">

    <Window.Background>
        <ImageBrush ImageSource = "../img/emoi_haikei.jpg" Stretch="UniformToFill"/>
    </Window.Background>

    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>



    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->
        <l:InteractionMessageTrigger MessageKey="ShowLogon" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowThanksCardCreate" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション 
                 Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowDepartmentMst" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション 
                 Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowBusyoRelation" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション 
                 Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowUserMst" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション 
                 Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowWorkRelation" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション 
                 Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>


        <l:InteractionMessageTrigger MessageKey="ShowCardCount" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション 
                 Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowPickup" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション 
                 Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>


    </i:Interaction.Triggers>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="344*" />
            <ColumnDefinition Width="173*" />
        </Grid.ColumnDefinitions>

        <ListView x:Name="TNKCD" ItemsSource="{Binding TNKCD}" Margin="16,10,10,10">
            <ListView.View>
                <GridView ColumnHeaderToolTip="People">
                    <GridViewColumn Header="送信日" DisplayMemberBinding="{Binding DateSend}" />
                    <GridViewColumn Header="To" DisplayMemberBinding="{Binding EmployeeTo.Name}" />
                    <GridViewColumn Header="From" DisplayMemberBinding="{Binding EmployeeFrom.Name}" />
                    <GridViewColumn Header="タイトル" DisplayMemberBinding="{Binding Title}" />
                </GridView>
            </ListView.View>
        </ListView>
        
        <StackPanel  Grid.Column="2">
            <TextBlock Margin="10" ><Run Text="To一覧▼" Foreground="White" FontSize="15" /></TextBlock>
            <ComboBox  ItemsSource="{Binding TNKCD}" DisplayMemberPath="EmployeeTo.Name" Margin="10,0,12,0" />

            <Button Content="カード作成" Margin="10" Command="{Binding ShowThanksCardCreateCommand}"/>
            <Button Content="枚数集計" Margin="10" Command="{Binding ShowCardCountCommand}" IsEnabled="{Binding AuthorizedUser.IsAdmin}" />
            <Button Content="部署関連情報" Margin="10" Command="{Binding ShowBusyoRelationCommand}" IsEnabled="{Binding AuthorizedUser.IsAdmin}"/>
            <Button Content="事例抽出" Margin="10"  Command="{Binding ShowPickupCommand}" IsEnabled="{Binding AuthorizedUser.IsAdmin}"/>
            <Button Content="アカウント管理" Margin="10" Command="{Binding ShowUserMstCommand}" IsEnabled="{Binding AuthorizedUser.IsAdmin}"/>
            <Button Content="部署・課管理" Margin="10" Command="{Binding ShowDepartmentMstCommand}" IsEnabled="{Binding AuthorizedUser.IsAdmin}"/>
            <Button Content="業務関連度" Margin="10"  Command="{Binding ShowWorkRelationCommand}" />
            <Button Content="マニュアル" Margin="10" Command="{Binding ShowManualCommand}" />
            <Button Content="ログアウト" Margin="10"  />
        </StackPanel>

    </Grid>
</Window>
